# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Create a variable which determines if we are to publish build artifacts for release
  # We will only publish if the source branch is dev, test or prod
  publishArtifact: in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/test', 'refs/heads/prod')
  artifactName: 'GraphQlFunc'

steps:

- task: DotNetCoreCLI@2
  displayName: Nuget Restore
  inputs:
    command: restore
    projects: '$(solution)'
    feedsToUse: config
    nugetConfigPath: '$(Build.Repository.LocalPath)\src\nuget.config'

- task: DotNetCoreCLI@2
  displayName: Build Solution
  inputs:
    command: build
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

# do this after other tasks such as building
- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# Build artifacts for publish
- task: DotNetCoreCLI@2
  displayName: Build Artifacts
  condition: and(succeeded(), variables['publishArtifact'])
  inputs:
    command: publish
    publishWebProjects: False
    projects: '**/PlanLimits.Functions.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# Copy our infrastructure files into ArtifactStagingDirectory
- task: CopyFiles@2
  displayName: 'Copy infrastructure files to Artifact Staging Directory'
  condition: and(succeeded(), variables['publishArtifact'])
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)\Infrastructure\'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Infrastructure\'

# Upload $(Build.ArtifactStagingDirectory) as a build artifact
- task: PublishBuildArtifacts@1
  displayName: Publish Build Artifacts
  condition: and(succeeded(), variables['publishArtifact'])
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: variables['artifactName']